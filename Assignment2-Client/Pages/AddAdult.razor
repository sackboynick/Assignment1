@page "/AddAdult"
@using Models
@using Data
@using Microsoft.AspNetCore.Components
@attribute [Authorize(Policy = "RequireAdmin")]

@inject IData _data
@inject NavigationManager _navigationManager;

<h3>AddAdult</h3>


<EditForm Model="@_newAdult" OnValidSubmit="@AddNewAdult">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">User Id:<br>
        <InputNumber  @bind-Value="_newAdult.Id"></InputNumber>
    </div>
    <div class="form-group">First Name: <br/>
        <InputTextArea rows="1" @bind-Value="_newAdult.FirstName"></InputTextArea>
    </div>
    <div class="form-group">Last Name: <br/>
        <InputTextArea rows="1" @bind-Value="_newAdult.LastName"></InputTextArea>
    </div>
    <div class="form-group">Haircolor: <br/>
        <InputTextArea rows="1" @bind-Value="_newAdult.HairColor"></InputTextArea>
    </div>
    <div class="form-group">Eyecolor: <br/>
        <InputTextArea rows="1" @bind-Value="_newAdult.EyeColor"></InputTextArea>
    </div>
    <div class="form-group">Age: <br/>
        <InputNumber @bind-Value="_newAdult.Age"></InputNumber>
    </div>
    <div class="form-group">Weight: <br/>
        <InputNumber @bind-Value="_newAdult.Weight"></InputNumber>
    </div>
    <div class="form-group">Height: <br/>
        <InputNumber @bind-Value="_newAdult.Height"></InputNumber>
    </div>
    <div class="form-group">Sex: <br/>
        <InputTextArea rows="1" @bind-Value="_newAdult.Sex"></InputTextArea>
    </div>

    <div class="form-group">Job Title: <br/>
        <InputTextArea rows="1" @bind-Value="_newJob.JobTitle"></InputTextArea>
    </div>
    <div class="form-group">Salary: <br/>
        <InputNumber @bind-Value="_newJob.Salary"></InputNumber>
        </div>
    
    <p class="actions">
        <button class="btn btn-outline-dark" type="submit">Create</button>
    </p>
</EditForm>

@code {
    private readonly Adult _newAdult = new Adult();
    private readonly Job _newJob = new Job();
    
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var user = (await AuthStat).User;
        if (user.Identity != null && !user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo("/");
        }
    }

    private void AddNewAdult()
    {
        _newAdult.JobTitle = _newJob;
        _data.AddAdult(_newAdult);
        _navigationManager.NavigateTo("/Adults");
    }
}