@page "/Families"
@using Assignment3_Client.Data
@using Assignment3_Client.Models

@inject IData _data
@inject NavigationManager _navigationManager;

<h3>Families</h3>

<p>
    Filter by Street Name: <input type="text" @onchange="@(arg => FilterByStreetName(arg))" style="width: 50px"/>
</p>

<button @onclick="DeleteFilters">Delete all filters</button>


@if (_familiesToShow == null)
{
    <p><em>Loading...</em></p>
}
else if (!_familiesToShow.Any())
{
    <p><em>No Families items exist. Please add some.</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>StreetName</th>
            <th>HouseNumber</th>
            <th>Adults N</th>
            <th>Children N</th>
            <th>Pets N</th>
            <th>Total salary</th>
            <th>Info and edit</th>
        </tr>
        </thead>
        <tbody>
        @foreach (Family item in _familiesToShow)
        {
            <tr>
                <td>@item.StreetName</td>
                <td>@item.HouseNumber</td>
                <td>@item.Adults.Count</td>
                <td>@item.Children.Count</td>
                <td>@item.Pets.Count</td>
                <td>@TotalSalary(item)</td>
                <td>
                    <button @onclick="@(() => Info(item.StreetName,item.HouseNumber))">
                        <i class="oi oi-info" style="color:#1b6ec2"></i>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Family> _families, _familiesToShow;
    private string _filterByStreetName;

    protected override async Task OnInitializedAsync()
    {
        _families = _data.GetFamilies().Result;
        _familiesToShow = _families;
    }

    private double TotalSalary(Family family)
    {
        Adult[] earners = family.Adults.ToArray();
        double salary = 0;
        for (int i = 0; i < family.Adults.Count;i++)
            salary+=earners[i].JobTitle.Salary;
        return salary;
    }
    

    private void FilterByStreetName(ChangeEventArgs evt)
    {
        _filterByStreetName = null;
        try
        {
            if (evt.Value != null) _filterByStreetName = evt.Value.ToString();
        }
        catch (Exception)
        {
    // ignored
        }
        ExecuteFilter();

    }

    private void ExecuteFilter()
    {
        _familiesToShow = _families.Where(t => _filterByStreetName != null && t.StreetName == _filterByStreetName || _filterByStreetName == null).ToList();
    }


    private void Info(string streetName,int houseNumber)
    {
        Adult[] adults = _data.GetFamily(streetName, houseNumber).Result.Adults.ToArray();
        int adultId = adults[0].Id;
        _navigationManager.NavigateTo($"FamilyInfoEdit/{adultId}");
    }

    private void DeleteFilters()
    {
        _familiesToShow = _families;
        _filterByStreetName = null;
    }

}